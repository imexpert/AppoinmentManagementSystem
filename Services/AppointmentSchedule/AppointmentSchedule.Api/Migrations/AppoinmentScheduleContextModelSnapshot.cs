// <auto-generated />
using System;
using AppointmentSchedule.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AppointmentSchedule.Api.Migrations
{
    [DbContext(typeof(AppoinmentScheduleContext))]
    partial class AppoinmentScheduleContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("Relational:Sequence:appointment.appointmentseq", "'appointmentseq', 'appointment', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:appointment.citizenseq", "'citizenseq', 'appointment', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:appointment.notificationseq", "'notificationseq', 'appointment', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AppoinmentSchedule.Domain.Aggregates.AppointmentAggregate.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "appointmentseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "appointment")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<DateTime>("AppoinmentTime")
                        .HasColumnName("AppoinmentTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CitizenId")
                        .HasColumnType("int");

                    b.Property<int>("_appointmentTypeId")
                        .HasColumnName("AppointmentTypeId")
                        .HasColumnType("int");

                    b.Property<int>("_countyId")
                        .HasColumnName("CountyId")
                        .HasColumnType("int");

                    b.Property<int>("_statusId")
                        .HasColumnName("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CitizenId");

                    b.HasIndex("_appointmentTypeId");

                    b.HasIndex("_countyId");

                    b.HasIndex("_statusId");

                    b.ToTable("Appointments","appointment");
                });

            modelBuilder.Entity("AppointmentSchedule.Domain.Aggregates.AppoinmentAggregate.Citizen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "citizenseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "appointment")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("TcIdentity")
                        .IsRequired()
                        .HasColumnType("nvarchar(11)")
                        .HasMaxLength(11);

                    b.HasKey("Id");

                    b.HasIndex("TcIdentity")
                        .IsUnique();

                    b.ToTable("Citizens","appointment");
                });

            modelBuilder.Entity("AppointmentSchedule.Domain.Aggregates.CountyAggregate.County", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Counties","appointment");
                });

            modelBuilder.Entity("AppointmentSchedule.Domain.Aggregates.NotificationAggregate.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "notificationseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "appointment")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("_appointmentId")
                        .HasColumnName("AppointmentId")
                        .HasColumnType("int");

                    b.Property<int>("_notificationTypeId")
                        .HasColumnName("NotificationTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("_appointmentId");

                    b.HasIndex("_notificationTypeId");

                    b.ToTable("Notifications","appointment");
                });

            modelBuilder.Entity("AppointmentSchedule.Domain.Enumerations.AppointmentType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("AppointmentTypes","appointment");
                });

            modelBuilder.Entity("AppointmentSchedule.Domain.Enumerations.NotificationType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("NotificationTypes","appointment");
                });

            modelBuilder.Entity("AppointmentSchedule.Domain.Enumerations.StatusType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("StatusTypes","appointment");
                });

            modelBuilder.Entity("AppoinmentSchedule.Domain.Aggregates.AppointmentAggregate.Appointment", b =>
                {
                    b.HasOne("AppointmentSchedule.Domain.Aggregates.AppoinmentAggregate.Citizen", "Citizen")
                        .WithMany()
                        .HasForeignKey("CitizenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppointmentSchedule.Domain.Enumerations.AppointmentType", "AppointmentType")
                        .WithMany()
                        .HasForeignKey("_appointmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppointmentSchedule.Domain.Aggregates.CountyAggregate.County", null)
                        .WithMany()
                        .HasForeignKey("_countyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppointmentSchedule.Domain.Enumerations.StatusType", "Status")
                        .WithMany()
                        .HasForeignKey("_statusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppointmentSchedule.Domain.Aggregates.AppoinmentAggregate.Citizen", b =>
                {
                    b.OwnsOne("AppointmentSchedule.Domain.ValueObjects.PhoneNumber", "PhoneNumber", b1 =>
                        {
                            b1.Property<int>("CitizenId")
                                .HasColumnType("int");

                            b1.Property<int>("AreaCode")
                                .HasColumnType("int");

                            b1.Property<int>("CountryCode")
                                .HasColumnType("int");

                            b1.Property<int>("Number")
                                .HasColumnType("int");

                            b1.HasKey("CitizenId");

                            b1.ToTable("Citizens");

                            b1.WithOwner()
                                .HasForeignKey("CitizenId");
                        });
                });

            modelBuilder.Entity("AppointmentSchedule.Domain.Aggregates.NotificationAggregate.Notification", b =>
                {
                    b.HasOne("AppoinmentSchedule.Domain.Aggregates.AppointmentAggregate.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("_appointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppointmentSchedule.Domain.Enumerations.NotificationType", "NotificationType")
                        .WithMany()
                        .HasForeignKey("_notificationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("AppointmentSchedule.Domain.ValueObjects.PhoneNumber", "Destination", b1 =>
                        {
                            b1.Property<int>("NotificationId")
                                .HasColumnType("int");

                            b1.Property<int>("AreaCode")
                                .HasColumnType("int");

                            b1.Property<int>("CountryCode")
                                .HasColumnType("int");

                            b1.Property<int>("Number")
                                .HasColumnType("int");

                            b1.HasKey("NotificationId");

                            b1.ToTable("Notifications");

                            b1.WithOwner()
                                .HasForeignKey("NotificationId");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
